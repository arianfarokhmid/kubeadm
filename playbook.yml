- hosts: all
  become: yes
  tasks: 
    - name: add Kubernetes apt-key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        state: present
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: add Kubernetes apt repository
      apt_repository:
       repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
       state: present
       filename: 'kubernetes'
 
    - name: installing kubelet
      apt:
        name: kubelet
        state: present
 
    - name: installing kubeadm
      apt:
        name: kubeadm
        state: present

    - name: Configure containerd
      shell: |
        sudo tee /etc/modules-load.d/containerd.conf <<EOF
        overlay
        br_netfilter
        EOF
        sudo modprobe overlay
        sudo modprobe br_netfilter

    - name: Configure kernel
      shell: |
        sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        EOF

    - name: Apply changes
      shell: sudo sysctl --system

    - name: Install containerd dependencies
      apt:
        name: [ 'apt-transport-https','ca-certificates','curl','gnupg-agent','software-properties-common' ]
        state: present
        update_cache: yes

    - name: Add containerd gpg key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    #- name: Add containerd software repository
    #  apt_repository:
    #    repo: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu   jammy stable
    #    state: present
    #    filename: docker
    #    update_cache: yes

    - name: Install containerd
      apt:
        name: [ 'containerd.io' ]
        state: present
        update_cache: yes

    - name: Configure containerd
      shell: |
        sudo mkdir -p /etc/containerd
        sudo containerd config default | sudo tee /etc/containerd/config.toml
        sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

    - name: Restart and enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    - name: Disable swap
      shell: swapoff -a

    - name: Stop swap from mounting
      shell: sed -i 's/^\/swap/#\/swap/g' /etc/fstab
 
- hosts: master
  become: yes
  tasks:
    - name: installing kubectl
      apt:
        name: kubectl
        state: present

    - name: Check if the master node is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init

    - name: Initialize the master node
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16
      when: kubeadm_init.stat.exists == false

    - name: Create .kube directory
      file:
        path: /home/support/.kube
        state: directory
        owner: support
        group: support
        mode: 0755
      when: kubeadm_init.stat.exists == false

    - name: Copy the kube config file
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/support/.kube/config
        remote_src: yes
        owner: support
        group: support
        mode: 0644
      when: kubeadm_init.stat.exists == false

    - name: Install calico CNI
      shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      become: yes
      become_user: support

    - name: Get the token for joining the worker nodes
      become: yes
      become_user: support
      shell: kubeadm token create --print-join-command
      register: join_command

    - name: Set join command variable
      set_fact:
        kubernetes_join_command: "{{ join_command.stdout }}"

    - name: Create dummy host to store variable for node config
      add_host:
        name: master1
        groups: master_nodes
        JOIN_COMMAND: "{{ kubernetes_join_command }}"
    

- hosts: workers
  become: yes
  tasks:
    - name: Check if the worker node is already joined
      stat:
        path: /etc/kubernetes/pki/ca.crt
      register: kubeadm_join
    - name: join worker nodes to cluster
      shell: "{{ hostvars['master1']['JOIN_COMMAND'] }}"
      when: kubeadm_join.stat.exists == false